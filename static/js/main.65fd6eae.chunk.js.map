{"version":3,"sources":["components/Card.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","data","this","props","map","item","index","className","key","src","alt","title","description","href","React","Component","Nav","next","prev","onClick","App","state","myRef","createRef","getData","a","fetch","res","json","setState","prevClick","slide","current","scrollLeft","offsetWidth","scrollWidth","nextClick","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAyBeA,E,uKArBF,IACEC,EAAQC,KAAKC,MAAbF,KACP,OACI,oCAEQA,EAAKG,KAAI,SAACC,EAAMC,GAAP,OACL,yBAAKC,UAAU,OAAOC,IAAKF,GAC3B,yBAAKG,IAAKJ,EAAKI,IAAKC,IAAI,KACxB,6BACI,4BAAKL,EAAKM,OACV,2BAAIN,EAAKO,aACT,uBAAGC,KAAK,KAAR,uB,GAZTC,IAAMC,WCeVC,E,uKAfF,IAAD,EACiBd,KAAKC,MAAnBc,EADH,EACGA,KAAMC,EADT,EACSA,KACb,OACI,yBAAKX,UAAU,OACX,yBAAKA,UAAU,OAAOY,QAASD,GAC/B,yBAAKT,IAAI,kBAAkBC,IAAI,MAE/B,yBAAKH,UAAU,OAAOY,QAASF,GAC/B,yBAAKR,IAAI,kBAAkBC,IAAI,W,GAT7BI,IAAMC,WCoDTK,E,4MA/CbC,MAAQ,CACNpB,KAAM,I,EAERqB,MAAQR,IAAMS,Y,EAEdC,Q,sBAAU,8BAAAC,EAAA,sEACUC,MAAM,aADhB,cACFC,EADE,gBAEWA,EAAIC,OAFf,OAEF3B,EAFE,OAGR,EAAK4B,SAAS,CAAC5B,KAAMA,IAHb,2C,EAWV6B,UAAY,WACV,IAAMC,EAAQ,EAAKT,MAAMU,QACzBD,EAAME,YAAcF,EAAMG,YACvBH,EAAME,YAAc,IACrBF,EAAME,WAAaF,EAAMI,c,EAI7BC,UAAY,WACV,IAAML,EAAQ,EAAKT,MAAMU,QACzBD,EAAME,YAAcF,EAAMG,YACvBH,EAAME,YAAeF,EAAMI,YAAcJ,EAAMG,cAChDH,EAAME,WAAa,I,kEAhBrB/B,KAAKsB,Y,+BAqBE,IACAvB,EAAQC,KAAKmB,MAAbpB,KACP,OACE,yBAAKM,UAAU,WACX,yBAAKA,UAAU,MAAM8B,IAAKnC,KAAKoB,OAC7B,kBAAC,EAAD,CAAMrB,KAAMA,KAGd,kBAAC,EAAD,CAAKiB,KAAMhB,KAAK4B,UAAWb,KAAMf,KAAKkC,iB,GA1C9BtB,IAAMC,WCMJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.65fd6eae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass Card extends React.Component{\r\n    render(){\r\n        const {data} = this.props;\r\n        return(\r\n            <>\r\n                {\r\n                    data.map((item, index) =>(\r\n                        <div className=\"card\" key={index}>\r\n                        <img src={item.src} alt=\"\"/>\r\n                        <div>\r\n                            <h2>{item.title}</h2>\r\n                            <p>{item.description}</p>\r\n                            <a href=\"/\">Read more</a>\r\n                        </div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\n\r\nclass Nav extends React.Component{\r\n    render(){\r\n        const {next, prev} = this.props;\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"prev\" onClick={prev}>\r\n                <img src=\"images/prev.png\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"next\" onClick={next}>\r\n                <img src=\"images/next.png\" alt=\"\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport Card from './components/Card'\nimport Nav from './components/Nav'\n\n\n\nclass App extends React.Component{\n  state = {\n    data: []\n  };\n  myRef = React.createRef();\n\n  getData = async ()=>{\n    const res = await fetch('data.json');\n    const data = await res.json();\n    this.setState({data: data});\n  };\n\n  componentDidMount(){\n    this.getData();\n  };\n\n\n  prevClick = () =>{\n    const slide = this.myRef.current;\n    slide.scrollLeft -= slide.offsetWidth;\n    if(slide.scrollLeft <= 0){\n      slide.scrollLeft = slide.scrollWidth;\n    }\n  };\n\n  nextClick = () =>{\n    const slide = this.myRef.current;\n    slide.scrollLeft += slide.offsetWidth;\n    if(slide.scrollLeft >= (slide.scrollWidth - slide.offsetWidth)){\n      slide.scrollLeft = 0;\n    }\n  };\n\n\n  render(){\n    const {data} = this.state;\n    return(\n      <div className=\"wrapper\">\n          <div className=\"app\" ref={this.myRef}>\n            <Card data={data}/>\n          </div>\n          \n          <Nav prev={this.prevClick} next={this.nextClick} />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}